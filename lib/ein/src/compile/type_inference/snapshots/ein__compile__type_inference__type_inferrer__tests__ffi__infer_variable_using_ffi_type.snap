---
source: lib/ein/src/compile/type_inference/type_inferrer.rs
expression: "infer_types(&Module::new(ModulePath::new(Package::new(\"\", \"\"), vec![]),\n                         Export::new(Default::default()), vec![],\n                         vec![FfiPackageInterface ::\n                              new(vec !\n                                  [(\"Foo\" . into(), types :: Number ::\n                                    new(SourceInformation :: dummy()) .\n                                    into())] . into_iter() . collect(),\n                                  Default :: default())], vec![],\n                         vec![VariableDefinition ::\n                              new(\"x\", Number ::\n                                  new(42.0, SourceInformation :: dummy()),\n                                  types :: Reference ::\n                                  new(\"Foo\", SourceInformation :: dummy()),\n                                  SourceInformation :: dummy(),) . into()]))"
---
Ok(
    Module {
        path: ModulePath {
            package: Package {
                name: "",
                version: "",
            },
            components: [],
        },
        type_definitions: [],
        definitions: [
            VariableDefinition(
                VariableDefinition {
                    name: "x",
                    body: Number(
                        Number {
                            value: 42.0,
                            source_information: SourceInformation {
                                source_name: "",
                                location: Location {
                                    line_number: 0,
                                    column_number: 0,
                                },
                                line: "",
                            },
                        },
                    ),
                    type_: Reference(
                        Reference {
                            name: "Foo",
                            source_information: SourceInformation {
                                source_name: "",
                                location: Location {
                                    line_number: 0,
                                    column_number: 0,
                                },
                                line: "",
                            },
                        },
                    ),
                    source_information: SourceInformation {
                        source_name: "",
                        location: Location {
                            line_number: 0,
                            column_number: 0,
                        },
                        line: "",
                    },
                },
            ),
        ],
        export: Export {
            names: {},
        },
        imports: [],
        ffi_imports: [
            FfiPackageInterface {
                types: {
                    "Foo": Number(
                        Number {
                            source_information: SourceInformation {
                                source_name: "",
                                location: Location {
                                    line_number: 0,
                                    column_number: 0,
                                },
                                line: "",
                            },
                        },
                    ),
                },
                functions: {},
            },
        ],
    },
)
