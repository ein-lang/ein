export {
  _AnyList,
  _FirstRest,
  _first,
  _rest,
  _concatenateLists,
  _emptyList,
  _equalLists,
  _getListLength,
  _prependToList,
  _firstRest,
  _mapList,
}

type _AnyList {
  node : Node | None,
}

type Node {
  first : Any,
  rest : Node | None,
}

type _FirstRest {
  first : Any,
  rest : _AnyList,
}

_first : _FirstRest -> Any
_first = _FirstRest.first

_rest : _FirstRest -> _AnyList
_rest = _FirstRest.rest

_firstRest : _AnyList -> _FirstRest | None
_firstRest list =
  case n = _AnyList.node list
    Node => _FirstRest{
        first = Node.first n,
        rest = _AnyList{ node = Node.rest n },
      }
    None => None

_emptyList : _AnyList
_emptyList =
  _AnyList{ node = None }

_getListLength : _AnyList -> Number
_getListLength list =
   getLengthFromNode (_AnyList.node list)

getLengthFromNode : Node | None -> Number
getLengthFromNode node =
  case node = node
    Node => 1 + getLengthFromNode (Node.rest node)
    None => 0

_prependToList : Any -> _AnyList -> _AnyList
_prependToList element list =
  _AnyList{ node = prependToNode element (_AnyList.node list) }

prependToNode : Any -> Node | None -> Node
prependToNode element node =
  Node{
    first = element,
    rest = node,
  }

_concatenateLists : _AnyList -> _AnyList -> _AnyList
_concatenateLists one other =
  _AnyList{
    node = concatenateNodes (_AnyList.node one) (_AnyList.node other)
  }

concatenateNodes : Node | None -> Node | None -> Node | None
concatenateNodes one other =
  case one = one
    Node => (
      case other = other
        Node =>
          prependToNode (Node.first one) (concatenateNodes (Node.rest one) other)
        None => one
      )
    None =>
      case other = other
        Node => other
        None => None

_equalLists : (Any -> Any -> Boolean) -> _AnyList -> _AnyList -> Boolean
_equalLists equalElements one other =
  equalNodes equalElements (_AnyList.node one) (_AnyList.node other)

equalNodes : (Any -> Any -> Boolean) -> Node | None -> Node | None -> Boolean
equalNodes equalElements one other =
  case one = one
    Node => (
      case other = other
        Node =>
          equalElements (Node.first one) (Node.first other) &&
          equalNodes equalElements (Node.rest one) (Node.rest other)
        None => False
      )
    None =>
      case other = other
        Node => False
        None => True

_mapList : (Any -> Any) -> _AnyList -> _AnyList
_mapList f list = _AnyList{ node = _mapNode f (_AnyList.node list) }

_mapNode : (Any -> Any) -> Node | None -> Node | None
_mapNode f node =
  case node = node
    Node =>
      Node{
        first = node |> Node.first |> f,
        rest = node |> Node.rest |> _mapNode f,
      }
    None => None
