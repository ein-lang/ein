export {
  concatenateLists,
  emptyList,
  getListLength,
  List,
  prependToList,
}

type List (
  node : Node | None,
)

type Node (
  first : Any,
  rest : Node | None,
)

emptyList : List
emptyList =
  List (
    node = None,
  )

getListLength : List -> Number
getListLength list =
   getLengthFromNode (List.node list)

getLengthFromNode : Node | None -> Number
getLengthFromNode node =
  case node = node
    Node => 1 + getLengthFromNode (Node.rest node)
    None => 0

prependToList : Any -> List -> List
prependToList element list =
  List ( node = prependToNode element (List.node list) )

prependToNode : Any -> Node | None -> Node
prependToNode element node =
  Node (
    first = element,
    rest = node,
  )

concatenateLists : List -> List -> List
concatenateLists one other =
  List (
    node = concatenateNodes (List.node one) (List.node other)
  )

concatenateNodes : Node | None -> Node | None -> Node | None
concatenateNodes one other =
  case one = one
    Node => (
      case other = other
        Node =>
          prependToNode (Node.first one) (concatenateNodes (Node.rest one) other)
        None => one
      )
    None =>
      case other = other
        Node => other
        None => None
