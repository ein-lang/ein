---
source: lib/lang/src/compile/expression_compiler.rs
expression: "expression_compiler.compile(&Case::with_type(types::Any::new(SourceInformation::dummy()),\n                                             \"x\",\n                                             Variable::new(\"y\",\n                                                           SourceInformation::dummy()),\n                                             vec![Alternative ::\n                                                  new(types :: None ::\n                                                      new(SourceInformation ::\n                                                          dummy()), None ::\n                                                      new(SourceInformation ::\n                                                          dummy())),\n                                                  Alternative ::\n                                                  new(types :: Any ::\n                                                      new(SourceInformation ::\n                                                          dummy()), None ::\n                                                      new(SourceInformation ::\n                                                          dummy()))],\n                                             SourceInformation::dummy()).into())"

---
Ok(
    Let(
        Let {
            name: "x",
            type_: Variant,
            bound_expression: Variable(
                Variable {
                    name: "y",
                },
            ),
            expression: Case(
                Variant(
                    VariantCase {
                        argument: Variable(
                            Variable {
                                name: "x",
                            },
                        ),
                        alternatives: [
                            VariantAlternative {
                                type_: Record(
                                    Record {
                                        name: "ein_None",
                                    },
                                ),
                                name: "x",
                                expression: Record(
                                    Record {
                                        type_: Record {
                                            name: "ein_None",
                                        },
                                        elements: [],
                                    },
                                ),
                            },
                        ],
                        default_alternative: Some(
                            Record(
                                Record {
                                    type_: Record {
                                        name: "ein_None",
                                    },
                                    elements: [],
                                },
                            ),
                        ),
                    },
                ),
            ),
        },
    ),
)
